generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
  engineType = "binary"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Blog {
  id                 String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title              String
  slug               String     @unique
  excerpt            String?
  content            String
  coverImage         String?
  status             BlogStatus @default(DRAFT)
  metaTitle          String?
  metaDescription    String?
  metaKeywords       String?
  scheduledPublishAt DateTime?  @db.Timestamptz(6)
  createdAt          DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime   @updatedAt @db.Timestamptz(6)
  publishedAt        DateTime?  @db.Timestamptz(6)
}

model User {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email         String   @unique
  username      String   @unique
  createdAt     DateTime @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime @updatedAt @db.Timestamptz(6)
  emailVerified Boolean  @default(false)
  firstName     String?
  isActive      Boolean  @default(true)
  lastName      String?
  role          String   @default("user")
  password      String
}

model Lead {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  email     String?
  phone     String
  location  String?
  source    String
  interest  String?
  status    LeadStatus @default(NEW)
  notes     String?
  createdAt DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt DateTime   @updatedAt @db.Timestamptz(6)
}

enum BlogStatus {
  DRAFT
  PUBLISHED
  SCHEDULED
  ARCHIVED
}

enum LeadStatus {
  NEW
  CONTACTED
  INTERESTED
  CONVERTED
  LOST
}

model Event {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String
  title1      String?
  title2      String?
  title3      String?
  description String
  details     Json?
  // Structured blocks as JSON (array) { title, description, items? }
  descriptionBlocks Json? @map("descriptionBlocksRich")
  coverImage  String?
  imageUrls   String[]      @default([])
  location    String?
  date        DateTime      @db.Timestamptz(6)
  entryFee    Decimal?      @db.Decimal(10, 2)
  status      EventStatus   @default(DRAFT)
  createdAt   DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime      @updatedAt @db.Timestamptz(6)
  
  // Relations
  responses   EventResponse[]
}

model EventResponse {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  eventId   String   @db.Uuid
  name      String
  phone     String
  email     String
  status    ResponseStatus @default(PENDING)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  
  // Relations
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

enum EventStatus {
  DRAFT
  PUBLISHED
  CANCELLED
  COMPLETED
}

enum ResponseStatus {
  PENDING
  CONFIRMED
  CANCELLED
}
