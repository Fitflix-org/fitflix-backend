generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model memberships {
  membership_id    String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  gym_id           String             @db.Uuid
  name             String?            @db.VarChar(100)
  description      String?
  duration_days    Int
  price_rupees     Int
  created_at       DateTime           @default(now()) @db.Timestamptz(6)
  gyms             gyms               @relation(fields: [gym_id], references: [gym_id], onDelete: Cascade)
  user_memberships user_memberships[]
}

model payments {
  payment_id     String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id        String              @db.Uuid
  amount_cents   Int
  currency       String              @default("INR") @db.Char(3)
  payment_date   DateTime            @default(now()) @db.Timestamptz(6)
  payment_method String?             @db.VarChar(50)
  reference_code String?             @db.VarChar(100)
  status         payment_status_enum @default(success)
  users          users               @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id], map: "idx_payments_user_id")
}

model progress_entries {
  entry_id      String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id       String?   @db.Uuid
  date_recorded DateTime  @db.Date
  weight_kg     Decimal?  @db.Decimal(5, 2)
  body_fat_pct  Decimal?  @db.Decimal(5, 2)
  notes         String?
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  users         users?    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id], map: "idx_progress_entries_user_id")
}

model user_memberships {
  user_membership_id String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id            String                 @db.Uuid
  membership_id      String                 @db.Uuid
  start_date         DateTime               @db.Date
  end_date           DateTime               @db.Date
  status             membership_status_enum @default(active)
  created_at         DateTime               @default(now()) @db.Timestamptz(6)
  memberships        memberships            @relation(fields: [membership_id], references: [membership_id], onDelete: Cascade, onUpdate: NoAction)
  users              users                  @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id], map: "idx_user_memberships_user_id")
}

model user_profiles {
  profile_id       String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id          String       @unique @db.Uuid
  date_of_birth    DateTime?    @db.Date
  gender           gender_enum?
  height_cm        Decimal?     @db.Decimal(5, 2)
  weight_kg        Decimal?     @db.Decimal(5, 2)
  food_preferences String[]     @default([])
  lifestyle        Json?
  created_at       DateTime?    @default(now()) @db.Timestamptz(6)
  users            users        @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_profile_user")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model users {
  user_id          String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email            String             @unique @db.VarChar(255)
  password_hash    String
  first_name       String?            @db.VarChar(100)
  last_name        String?            @db.VarChar(100)
  phone            String?            @db.VarChar(20)
  role             user_role_enum     @default(member)
  created_at       DateTime           @default(now()) @db.Timestamptz(6)
  updated_at       DateTime           @default(now()) @db.Timestamptz(6)
  is_deleted       Boolean            @default(false)
  gyms             gyms[]
  payments         payments[]
  progress_entries progress_entries[]
  user_memberships user_memberships[]
  user_profiles    user_profiles?

  @@index([email], map: "idx_users_email")
  @@index([role], map: "idx_users_role")
}

model gym_types {
  gym_type_id String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @unique @db.VarChar(50)
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  gyms        gyms[]
}

model gym_info {
  info_id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  gym_id          String    @db.Uuid
  address         String?
  city            String?   @db.VarChar(100)
  contact_number  String?   @db.VarChar(20)
  branch_phone    String?   @db.VarChar(20)
  branch_email    String?   @db.VarChar(150)
  opening_hours   String?   @db.VarChar
  latitude        Decimal?  @db.Decimal(9, 6)
  longitude       Decimal?  @db.Decimal(9, 6)
  google_maps_url String?
  created_at      DateTime? @default(now()) @db.Timestamp(6)
  gyms            gyms      @relation("GymToInfo", fields: [gym_id], references: [gym_id], onDelete: Cascade, map: "fk_gym_info_gym")
}

model gyms {
  gym_id            String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name              String        @db.VarChar(150)
  branch_manager_id String?       @db.Uuid
  created_at        DateTime?     @default(now()) @db.Timestamp(6)
  city              String?       @db.VarChar(100)
  gym_type_id       String        @db.Uuid
   gym_info          gym_info[]    @relation("GymToInfo")
  users             users?        @relation(fields: [branch_manager_id], references: [user_id], map: "fk_gym_manager")
  gym_types         gym_types     @relation(fields: [gym_type_id], references: [gym_type_id], onDelete: SetNull, map: "fk_gym_type")
  memberships       memberships[]
}

enum gender_enum {
  male
  female
  other
}

enum membership_status_enum {
  not_started
  active
  started
  ended
  expired
  cancelled
}

enum payment_status_enum {
  success
  pending
  failed
  refunded
}

enum user_role_enum {
  admin
  member
  trainer
  staff
}
